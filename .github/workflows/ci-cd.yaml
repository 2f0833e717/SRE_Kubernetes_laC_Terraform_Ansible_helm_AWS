name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  DOCKER_IMAGE: sample-app
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run tests
        run: |
          cd kubernetes/sample-app
          go test -v ./...
          
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: kubernetes/sample-app

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: kubernetes/sample-app
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} /main -test

  deploy-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Set up kind
        uses: helm/kind-action@v1.12.0
        
      - name: Deploy to kind
        run: |
          kubectl apply -f kubernetes/manifests/namespace.yaml
          kubectl apply -f kubernetes/manifests/sample-app/
          
      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/sample-app -n microservices
          
      - name: Run integration tests
        run: |
          kubectl port-forward svc/sample-app -n microservices 30002:80 &
          sleep 5
          curl -f http://localhost:30002/
          
  security-scan:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH' 